package ${javaInfo.getServiceTestPackageName()};

import org.apache.commons.lang.StringUtils;

import com.chinasofti.ro.bizframework.core.Globals;
import com.chinasofti.ro.bizframework.core.utils.Configuration;
import com.chinasofti.ro.bizframework.core.orm.dialect.DBDialect;
import com.chinasofti.ro.bizframework.core.orm.mapping.Mapping;
import com.chinasofti.ro.bizframework.core.test.service.BaseTest;

import ${javaInfo.getServicePackageName()}.*;
import ${javaInfo.getPackageName()}.*;
/**
 * <p>service test</p>
 * 
 * @author BizFoundation
 * @version 5.0
 * @since 1.0
 */
public class ${javaInfo.getUpperServiceTestname()} extends BaseTest {
	
	/**
	 * 注入 IMPORT_CLASS_FIRST_UPPER_NAME
	 */
	private  ${javaInfo.getUpperServicename()} ${javaInfo.getServicename()};
	public void set${javaInfo.getUpperServicename()}(${javaInfo.getUpperServicename()} ${javaInfo.getServicename()}) {
		this.${javaInfo.getServicename()} = ${javaInfo.getServicename()};
	}
	
	/**
	 * 初始化hbm xml file
	 */
	protected void onSetUp() throws Exception {
		DBDialect dialect = DBDialect.getDialect(Globals.DATABASE_TYPE_H2);
		String mappingDirectoryLocations = Configuration.getString(Globals.CONF_MAPPINGDIRECTORY);
		if (StringUtils.isNotBlank(mappingDirectoryLocations)) {
			if (mappingDirectoryLocations.indexOf(";")!=-1) {
				String[] mappingDirectoryLocationArr = mappingDirectoryLocations.split(";");
				for (int i = 0; i < mappingDirectoryLocationArr.length; i++) {
					if (mappingDirectoryLocationArr[i].indexOf("classpath") < 0) {
						mappingDirectoryLocationArr[i] = "classpath*:" + mappingDirectoryLocationArr[i];
					}
					Mapping.initMapping(dialect, mappingDirectoryLocationArr[i]);
				}
			} else {
				if (mappingDirectoryLocations.indexOf("classpath") < 0) {
					mappingDirectoryLocations = "classpath*:" + mappingDirectoryLocations;
				}
				Mapping.initMapping(dialect, mappingDirectoryLocations);
			}
		}
	}
	
	/**
	 * 测试保存的方法
	 */
	public void testSave() {
#set($index=0)#foreach($pentityname in ${javaInfo.getPentityNameList()})
		$javaInfo.getUpper_pentityNameList().get($index) $pentityname= new $javaInfo.getUpper_pentityNameList().get($index)(); 
#set($index=$index+1)#end	
		${javaInfo.getServicename()} .save(#set($index=0)#foreach($pentityname in ${javaInfo.getPentityNameList()})#if($index==$javaInfo.getUpper_pentityNameList().size() - 1)$pentityname #else $pentityname,#end#set($index=$index+1)#end);
	}
	
}